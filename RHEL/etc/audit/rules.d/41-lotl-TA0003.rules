## LOLBins Used for Persistence
##  Ref: https://attack.mitre.org/tactics/TA0003/

## The adversary is trying to maintain their foothold.

## Persistence consists of techniques that adversaries use to keep access to systems across restarts,
## changed credentials, and other interruptions that could cut off their access. Techniques used for
## persistence include any access, action, or configuration changes that let them maintain their foothold
## on systems, such as replacing or hijacking legitimate code or adding startup code.

## T1574 - Hijack Execution Flow: Adversaries may hijack the flow of execution of a program to execute their own code.
##   Ref: https://attack.mitre.org/techniques/T1574/

## T1543 - Create or Modify System Process: Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence.
##   Ref: https://attack.mitre.org/techniques/T1543/

## T1546 - Event Triggered Execution: Adversaries may leverage event triggers to execute malicious code in response to specific events.
##   Ref: https://attack.mitre.org/techniques/T1546/

#############################################
## T1574 - Hijack Execution Flow: Adversaries may hijack the flow of execution of a program to execute their own code.
##   Ref: https://attack.mitre.org/techniques/T1574/
##        https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1574.006/T1574.006.md

## Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be
## for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate
## privileges or evade defenses, such as application control or other restrictions on execution.

## There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be
## executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system
## looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.

## Monitor modification of shared libraries (T1574.002 - Dynamic Linker Hijacking)
##-w /etc/ld.so.preload -p wa -k T1574_LD_PRELOAD_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/ld.so.preload -F auid>=1000 -F auid!=4294967295 -k T1574_LD_PRELOAD_Modification
## Note: This alternative -a syntax is similar, where it differs is that it includes user filtering and logs the UID that made the file change
##       The -w syntax file monitor is more prevalently used for tracking modified files, but is slower

##-w /etc/ld.so.conf -p wa -k T1574_LD_PRELOAD_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/ld.so.conf -F auid>=1000 -F auid!=4294967295 -k T1574_LD_PRELOAD_Modification

##-w /etc/ld.so.conf.d/ -p wa -k T1574_LD_PRELOAD_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/ld.so.conf.d/ -F auid>=1000 -F auid!=4294967295 -k T1574_LD_PRELOAD_Modification

##-w /lib/ -p wa -k T1574_Shared_Library_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/lib/ -F auid>=1000 -F auid!=4294967295 -k T1574_LD_PRELOAD_Modification

##-w /lib64/ -p wa -k T1574_Shared_Library_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/lib64/ -F auid>=1000 -F auid!=4294967295 -k T1574_LD_PRELOAD_Modification

##-w /usr/lib/ -p wa -k T1574_Shared_Library_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/usr/lib/ -F auid>=1000 -F auid!=4294967295 -k T1574_LD_PRELOAD_Modification

##-w /usr/lib64/ -p wa -k T1574_Shared_Library_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/usr/lib64/ -F auid>=1000 -F auid!=4294967295 -k T1574_LD_PRELOAD_Modification

## Monitor execution of the dynamic linker (T1574.002 - Dynamic Linker Hijacking)
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/ld.so -F auid>=1000 -F auid!=4294967295 -k T1574_Dynamic_Linker_Execution
-a always,exit -F arch=b64 -S execve -F exe=/usr/sbin/ldconfig -F auid>=1000 -F auid!=4294967295 -k T1574_Dynamic_Linker_Execution

## Monitor modification of system binaries (T1574.010 - Path Interception by Unquoted Service Paths)
##-w /usr/bin/ -p wa -k T1574_System_Binary_Hijack
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/usr/bin/ -F auid>=1000 -F auid!=4294967295 -k T1574_System_Binary_Hijack
##-w /usr/sbin/ -p wa -k T1574_System_Binary_Hijack
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/usr/sbin/ -F auid>=1000 -F auid!=4294967295 -k T1574_System_Binary_Hijack
##-w /bin/ -p wa -k T1574_System_Binary_Hijack
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/bin/ -F auid>=1000 -F auid!=4294967295 -k T1574_System_Binary_Hijack
##-w /sbin/ -p wa -k T1574_System_Binary_Hijack
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/sbin/ -F auid>=1000 -F auid!=4294967295 -k T1574_System_Binary_Hijack

## Monitor execution of common system utilities that modify binaries
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/install -F auid>=1000 -F auid!=4294967295 -k T1574_Binary_Install
##-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/mv -F auid>=1000 -F auid!=4294967295 -k T1574_Binary_Install
##-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/cp -F auid>=1000 -F auid!=4294967295 -k T1574_Binary_Install
## These two rules are likely to cause a log storm, adapt the filters as necessary to exclude whitelisted activity

## Monitor modification of systemd service files (T1574.012 - Hijack Execution Flow via Services)
##-w /etc/systemd/system/ -p wa -k T1574_Service_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/systemd/system/ -F auid>=1000 -F auid!=4294967295 -k T1574_Service_Modification
##-w /usr/lib/systemd/system/ -p wa -k T1574_Service_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/usr/lib/systemd/system/ -F auid>=1000 -F auid!=4294967295 -k T1574_Service_Modification

## Monitor execution of systemctl and service management commands
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/systemctl -F auid>=1000 -F auid!=4294967295 -k T1574_Service_Control
-a always,exit -F arch=b64 -S execve -F exe=/usr/sbin/service -F auid>=1000 -F auid!=4294967295 -k T1574_Service_Control

## Monitor modifications to PAM configuration files (T1574.006 - Pluggable Authentication Module (PAM) Hijacking)
##-w /etc/pam.d/ -p wa -k T1574_PAM_Hijack
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/pam.d/ -F auid>=1000 -F auid!=4294967295 -k T1574_PAM_Hijack
##-w /etc/security/pam_env.conf -p wa -k T1574_PAM_Hijack
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/security/pam_env.conf -F auid>=1000 -F auid!=4294967295 -k T1574_PAM_Hijack

## Monitor suspicious environment variable modifications (T1574.007 - Path Interception by Environment Variable)
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/environment -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/profile -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/profile.d/ -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/bash.bashrc -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/root/.bashrc -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/root/.bash_profile -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
##-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/home/*/.bashrc -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
##-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/home/*/.bash_profile -F auid>=1000 -F auid!=4294967295 -k T1574_Environment_Variables
## auditd doesn't support wildcards in the path field like /home/*/.bashrc. This is because auditd needs to resolve the paths at the time the rule is loaded, and wildcards would require constant re-evaluation, which isn't how it's designed to work.
## One possibility is to periodically iterate through all /home directories and generate the auditd rules, but it is not very practical
## At the minimum, it is recommended to add rules for known specific application accounts, such as /home/oracle/.bash_profile

## Monitor execution of gdb or strace (used for debugging and potential hijacking)
##-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/gdb -F auid>=1000 -F auid!=4294967295 -k T1574_Debugger_Abuse
## Covered under TA0006
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/strace -F auid>=1000 -F auid!=4294967295 -k T1574_Debugger_Abuse

#############################################
## T1543 - Create or Modify System Process
##   Ref: https://attack.mitre.org/techniques/T1543/
##        https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1543.002/T1543.002.md

## Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence.
## When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux,
## these system processes are referred to as services.

## Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval
## in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.

## Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may
## leverage this functionality to create or modify system processes in order to escalate privileges.

## Monitor systemd service modifications (T1543.003)
##-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/systemd/system/ -F auid>=1000 -F auid!=4294967295 -k T1543_Systemd_Modification
##-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/usr/lib/systemd/system/ -F auid>=1000 -F auid!=4294967295 -k T1543_SysV_Service_Modification
## Covered by T1574_Service_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/systemd/system.conf -F auid>=1000 -F auid!=4294967295 -k T1543_SysV_Service_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/systemd/user.conf -F auid>=1000 -F auid!=4294967295 -k T1543_SysV_Service_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/systemd/system/ -F auid>=1000 -F auid!=4294967295 -k T1543_SysV_Service_Modification

## Monitor execution of systemctl commands
##-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/systemctl -F auid>=1000 -F auid!=4294967295 -k T1543_Systemd_Control
##-a always,exit -F arch=b64 -S execve -F exe=/usr/sbin/service -F auid>=1000 -F auid!=4294967295 -k T1543_Systemd_Control

## Monitor modifications to init scripts (T1543.002)
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/init.d/ -F auid>=1000 -F auid!=4294967295 -k T1543_Init_Script_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/rc.d/ -F auid>=1000 -F auid!=4294967295 -k T1543_Init_Script_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/rc.local -F auid>=1000 -F auid!=4294967295 -k T1543_Init_Script_Modification

## Monitor cron job modifications (T1543.001)
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/crontab -F auid>=1000 -F auid!=4294967295 -k T1546_Cron_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/cron.allow -F auid>=1000 -F auid!=4294967295 -k T1543_Cron_Control
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/cron.deny -F auid>=1000 -F auid!=4294967295 -k T1543_Cron_Control
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/cron.d/ -F auid>=1000 -F auid!=4294967295 -k T1546_Cron_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/cron.daily/ -F auid>=1000 -F auid!=4294967295 -k T1546_Cron_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/cron.hourly/ -F auid>=1000 -F auid!=4294967295 -k T1546_Cron_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/cron.weekly/ -F auid>=1000 -F auid!=4294967295 -k T1546_Cron_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/cron.monthly/ -F auid>=1000 -F auid!=4294967295 -k T1546_Cron_Modification

## Monitor execution of cron job scheduling commands
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/crontab -F auid>=1000 -F auid!=4294967295 -k T1543_Cron_Control
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/at -F auid>=1000 -F auid!=4294967295 -k T1543_At_Control

## Monitor modifications to SSH persistence mechanisms (T1543.004)
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/etc/ssh/sshd_config -F auid>=1000 -F auid!=4294967295 -k T1543_SSH_Config_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/root/.ssh/authorized_keys -F auid>=1000 -F auid!=4294967295 -k T1543_SSH_Authorized_Keys
## auditd doesn't support wildcards in the path field like /home/*/.ssh/authorized_keys. This is because auditd needs to resolve the paths at the time the rule is loaded, and wildcards would require constant re-evaluation, which isn't how it's designed to work.
## One possibility is to periodically iterate through all /home directories and generate the auditd rules, but it is not very practical
## At the minimum, it is recommended to add rules for known specific application account:
##-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F path=/home/user1/.ssh/authorized_keys -F auid>=1000 -F auid!=4294967295 -k T1543_SSH_Authorized_Keys

## Additional protections (File permission changes and chattr abuse)
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/chattr -F auid>=1000 -F auid!=4294967295 -k T1543_File_Permissions
-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/chmod -F auid>=1000 -F auid!=4294967295 -k T1543_File_Permissions

#############################################
## T1546 - Event Triggered Execution: Adversaries may leverage event triggers to execute malicious code in response to specific events.
##   Ref: https://attack.mitre.org/techniques/T1546/

## Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events.
## Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific
## applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response
## to specific cloud events.

## Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code.
## After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed
## whenever the event trigger is invoked.

## Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able
## to abuse these triggered execution mechanisms to escalate their privileges.

## To list all active timer units on your system using the following command:
## systemctl list-unit-files --type=timer
## systemctl list-timers

## Examples:
## dnf-makecache.timer: Ensures that the metadata for the DNF/YUM repositories is kept up-to-date.
## systemd-tmpfiles-clean.timer: Periodically cleans up temporary files.
## logrotate.timer: Manages the rotation of log files.
## man-db.timer: Updates the manual page database.
## fstrim.timer: Periodically trims unused blocks on a mounted filesystem.
## unbound-anchor.timer: Updates the root trust anchor for DNSSEC validation.

# Monitor execution of systemctl commands related to timers
##-a always,exit -F arch=b64 -S execve -F exe=/usr/bin/systemctl -F auid>=1000 -F auid!=4294967295 -k T1546_Systemd_Control
## Covered by T1574_Service_Control

## Monitor Udev rule modifications (T1546.007 - Udev Rules)
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/etc/udev/rules.d/ -F auid>=1000 -F auid!=4294967295 -k T1546_Udev_Modification
-a always,exit -F arch=b64 -S write,pwrite,truncate,ftruncate,creat,chmod,fchmod,chown,fchown,lchown,utime,utimes,futimesat -F dir=/lib/udev/rules.d/ -F auid>=1000 -F auid!=4294967295 -k T1546_Udev_Modification

## Monitor execution of udevadm (used to reload rules)
-a always,exit -F arch=b64 -S execve -F exe=/usr/sbin/udevadm -F auid>=1000 -F auid!=4294967295 -k T1546_Udev_Control
