##
## This file controls the configuration of the audit daemon
##

## CIS # 4.1.2.1 Ensure audit log storage size is configured
## auditd only controls the size of logs, not the retention

## Override STIG default settings = 40MB of logs
## max_log_file = 8
## num_logs = 5

# Budget 1GB for total size size (128M * 8)
# Logs will cycle 
max_log_file = 128
num_logs = 8

## CIS 4.1.2.2 Ensure audit logs are not automatically deleted
## The max_log_file_action setting determines how to handle the audit log file reaching the
## max file size. A value of keep_logs will rotate the logs but never delete old logs.
## max_log_file_action = keep_logs
## REJECTED

## xccdf_org.ssgproject.content_rule_auditd_data_retention_max_log_file_action
## Configure auditd max_log_file_action Upon Reaching Maximum Log Size
## The default action to take when the logs reach their maximum size is to rotate the log files, discarding the oldest one.
## Possible values for ACTION are described in the auditd.conf man page. These include:
## ignore
## syslog
## suspend
## rotate
## keep_logs
## Set the ACTION to rotate to ensure log rotation occurs. This is the default. The setting is case-insensitive.

## Automatically rotating logs (by setting this to rotate) minimizes the chances of the system unexpectedly running out of
## disk space by being overwhelmed with log data. However, for systems that must never discard log data, or which use
## external processes to transfer it and reclaim space, keep_logs can be employed.

## STIG default is to rotate the logs
## If archival is required, logs normally must relayed to a SIEM in near real-time.
max_log_file_action = ROTATE

## CIS 4.1.2.3 Ensure system is disabled when audit logs are full
## The auditd daemon can be configured to halt the system when the audit logs are full.
## In high security contexts, the risk of detecting unauthorized access or nonrepudiation
## exceeds the benefit of the system's availability.
## REJECT
## admin_space_left_action = halt

## xccdf_org.ssgproject.content_rule_auditd_data_retention_admin_space_left_action
## Configure auditd admin_space_left Action on Low Disk Space
## The auditd service can be configured to take an action when disk space is running low but prior to running out of space completely
## Set this value to single to cause the system to switch to single user mode for corrective action. Acceptable values also include suspend and halt.
## For certain systems, the need for availability outweighs the need to log all actions, and a different setting should be determined.
## Details regarding all possible values for ACTION are described in the auditd.conf man page.
## Rationale: Administrators should be made aware of an inability to record audit records. If a separate partition or logical volume
## of adequate size is used, running low on space for audit records should never occur.

## STIG
## V-230388 The RHEL 8 System Administrator (SA) and Information System Security Officer (ISSO)
## (at a minimum) must be alerted of an audit processing failure event.
action_mail_acct = root
admin_space_left = 50

## STIG
## V-244543 RHEL 8 must notify the System Administrator (SA) and Information System Security Officer (ISSO)
## (at a minimum) when allocated audit record storage volume 75 percent utilization.
## If security personnel are not notified immediately when storage volume reaches 75 percent utilization,
## they are unable to plan for audit record storage capacity expansion.

## Possible values for ACTION are described in the auditd.conf man page. These include:
## syslog
## email
## exec
## suspend
## single
## halt
## Set this to email (instead of the default, which is suspend) as it is more likely to get prompt attention.
## Acceptable values also include suspend, single, and halt.

## suspend will pause the auditing system if it encounters a condition that triggers this action, such as the audit
## log storage reaching a critical threshold. This doesn't shut down the system but rather pauses audit logging until
## the issue is resolved or until audit logging is manually restarted. This means the system will continue to operate,
## but it will not record audit events, which could lead to a gap in the audit logs.

## halt means that if the specified audit condition is met, the system will be brought to a complete stop. This is a more
## drastic measure than suspend as it affects the entire system, not just the audit process. A halt action would be used in
## situations where continuing operation without audit capabilities is considered unacceptable from a security standpoint.
## When halt is triggered, the system will shut down entirely, thereby preventing any use of the system until it is manually
## restarted and the issue causing the audit condition is resolved.

## email requires SMTP to be configured, which exposes the endpoint to data exfiltration in case it stores sensitive data

admin_space_left_action = suspend
space_left_action = suspend
space_left = 25%

# Specifies what action the audit daemon should take if it encounters a disk error while writing audit logs.
# ignore: No action is taken.
# syslog: Logs a message to the system log.
# exec: Executes a specified program or script.
# suspend: Pauses the audit daemon.
# single: Puts the system into single-user mode.
# halt: Shuts down the system.
disk_error_action = suspend

# Specifies what action the audit daemon should take when the disk space allocated for audit logs becomes full.
# Options:
# ignore: No action is taken.
# syslog: Logs a message to the system log.
# exec: Executes a specified program or script.
# suspend: Pauses the audit daemon.
# single: Puts the system into single-user mode.
# halt: Shuts down the system.
disk_full_action = suspend

# Controls whether the audit daemon distributes audit events to other networked audit daemons.
# To specify another networked audit daemon, use the audisp-remote plugin and its configuration file located at /etc/audisp/audisp-remote.conf
distribute_network = no

# Specifies the time in seconds that the audit daemon should wait for an event to be completed before it considers it finished.
# This is particularly useful for handling events that span multiple records, ensuring they are treated as a single event.
# end_of_event_timeout = 2: This means the audit daemon will wait 2 seconds for an event to complete before closing it.
# The purpose is to ensure that all parts of an event are collected and logged together, improving the accuracy and integrity of the
# audit logs. This helps in maintaining a coherent record of multi-part events.
end_of_event_timeout = 2

# Controls how frequently the audit daemon writes audit records from its internal buffer to disk.
# Options:
# none: No periodic flushing.
# incremental: Flushes the buffer to disk periodically based on the freq setting.
# incremental_async: Similar to incremental, but flushing happens asynchronously.
# data: Ensures that data is written to the disk immediately (synchronous writes).
# sync: Completely synchronous mode, ensuring that each write is flushed to disk immediately.
flush = INCREMENTAL_ASYNC

# Specifies how often the audit daemon should flush its internal event queue to disk.
# freq = 50: This sets the frequency to flush the audit event queue to every 50 records.
# The purpose is to control the balance between performance and data safety. Frequent flushing (lower numbers) ensures that audit data is written to
# disk more often, reducing the risk of data loss in the event of a crash. Less frequent flushing (higher numbers) can improve
# performance but increases the risk of losing recent audit data if the system crashes.
freq = 50

# Specifies the Kerberos principal name used by the audit daemon when Kerberos support is enabled.
krb5_principal = auditd

# Specifies the path to the Kerberos key file used by the audit daemon for authentication when Kerberos support is enabled.
# The purpose is to authenticate the audit daemon using Kerberos, which enhances security by ensuring that log data is sent securely and only
# to authorized entities. This is particularly useful in environments requiring strong authentication and secure communication for audit logs.
##krb5_key_file = /etc/audit/audit.key

# Audits local events
local_events = yes

# Specifies the location of the audit log file.
log_file = /var/log/audit/audit.log

## V-230395
## Without establishing what type of events occurred, the source of events, where events occurred, and the outcome of events,
## it would be difficult to establish, correlate, and investigate the events leading up to an outage or attack. Audit record
## content that may be necessary to satisfy this requirement includes, for example, time stamps, source and destination addresses,
## user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control
## rules invoked. Enriched logging aids in making sense of who, what, and when events occur on a system. Without this, determining
## root cause of an event will be much more difficult.
## For example, ENRICHED resolve id's to names. This is available from auditd > 2.6.
log_format = ENRICHED

# Sets the group ownership of the log file to root 
log_group = root

# The maximum number of times the audit daemon (auditd) will attempt to restart itself if it crashes or stops unexpectedly
max_restarts = 10

# Specifies a unique identifier for the audit daemon.
# This name can be used for identifying logs generated by different hosts, especially when audit logs from multiple sources are aggregated in a central location.
##name = mydomain

# Uses the hostname format for naming conventions.
name_format = hostname

# Determines the action to take when the internal queue of audit events overflows.
# Options include SYSLOG, EMAIL, EXEC, SUSPEND, SINGLE, and HALT.
# EMAIL: Sends an email to the administrator. Requires SMTP to be configured.
# EXEC: Executes a specified program or script.
# SUSPEND: Pauses the audit daemon. The system continues to run, but no audit logs are recorded until the audit daemon is restarted.
# SINGLE: Switches the system to single-user mode for administrative intervention.
# SYSLOG: logs a message to the syslog.
# HALT: Shuts down the system entirely to prevent it from running without audit logging capabilities.
overflow_action = SYSLOG

# Specifies the directory where the audit daemon looks for dynamic plugins that can extend its functionality. These plugins can be used for
# various purposes, such as forwarding audit logs to remote servers, processing audit logs in real-time, or integrating with other security tools.
plugin_dir = /etc/audit/plugins.d

# Increases the priority of the audit daemon.
priority_boost = 4

# Sets the queue depth for audit events
q_depth = 1200

# Specifies the range of ports that the audit daemon will use for TCP client connections.
# Allows the administrator to control the port range used by the audit daemon for client connections, which can be useful for firewall configuration
# and network security management.
##tcp_client_ports = 1024-65535

# Defines the specific port number for the audit daemon to accept TCP connections.
# Allows remote systems to send audit logs to the audit daemon over a specific port.
##tcp_listen_port = 60

# Specifies the maximum amount of time, in seconds, that an idle client (i.e., a client that is not sending or receiving data) can stay connected to the audit daemon over TCP.
# The default value of 0 means no limit, allowing clients to remain connected indefinitely.
# A setting of 300 would disconnect clients that have been idle for 300 seconds (5 minutes).
tcp_client_max_idle = 0

# Specifies the maximum number of pending connections that can be queued up for acceptance by the audit daemon when using TCP for audit logs.
# tcp_listen_queue = 5: This means that up to 5 connection attempts can be queued at the same time. If additional connection attempts are made while the
# queue is full, they may be refused until space in the queue becomes available.
# This setting helps manage network traffic and ensures that the audit daemon does not get overwhelmed by too many simultaneous connection attempts.
tcp_listen_queue = 5

# Specifies the maximum number of simultaneous TCP connections allowed from a single IP address to the audit daemon.
# tcp_max_per_addr = 1: This setting allows only one connection per IP address.
# This configuration helps prevent a single IP address from monopolizing all the available TCP connections to the audit daemon, enhancing security and
# ensuring fair resource distribution.
tcp_max_per_addr = 1

# Uses TCP for network transport of audit logs
transport = TCP

# Enables TCP Wrappers for network security.
use_libwrap = yes

# Enables email verification for notifications.
verify_email = yes

# Enables writing of audit logs to disk
write_logs = yes
